import React, { useState, useEffect, useMemo, useCallback, useRef } from 'react'
import { Row, Col, Card, Typography, Button, Modal, Input, Table, Tag, Space, Spin, Alert, message, Select, Divider, AutoComplete, DatePicker, Menu, Dropdown } from 'antd'
import type { ColumnsType } from 'antd/es/table'
import { PlusOutlined, EditOutlined, DeleteOutlined, ShoppingCartOutlined, CarOutlined, ClockCircleOutlined, ThunderboltOutlined, WarningOutlined, CheckOutlined, DownOutlined, UpOutlined, SearchOutlined, UploadOutlined, DownloadOutlined, MoreOutlined } from '@ant-design/icons'
import { format } from 'date-fns'
import { SupplierOrder, SupplierOrderItem, Supplier, Ingredient } from '../types'
import { supplierOrdersService, suppliersService, ingredientsService, subscriptions } from '../services/supabaseService'
import { nomNomColors } from '../theme/nomnom-theme'
import { useTranslation } from 'react-i18next'
import Papa from 'papaparse'
import { formatCurrency } from '../utils/currency'
import dayjs from 'dayjs'

const { Title, Text } = Typography
const { Option } = Select

const ORDER_STATUSES = ['draft', 'submitted', 'confirmed', 'shipped', 'delivered', 'cancelled'] as const
const ORDER_PRIORITIES = ['low', 'medium', 'high', 'urgent'] as const

const getStatusColor = (status: SupplierOrder['status']) => {
  switch (status) {
    case 'draft':
      return 'default'
    case 'submitted':
      return 'processing'
    case 'confirmed':
      return 'blue'
    case 'shipped':
      return 'warning'
    case 'delivered':
      return 'success'
    case 'cancelled':
      return 'error'
    default:
      return 'default'
  }
}

const getPriorityColor = (priority: SupplierOrder['priority']) => {
  switch (priority) {
    case 'low':
      return 'default'
    case 'medium':
      return 'processing'
    case 'high':
      return 'warning'
    case 'urgent':
      return 'error'
    default:
      return 'default'
  }
}

export default function SupplierOrders() {
  const docDir = typeof document !== 'undefined' ? document.documentElement.dir : undefined
  const isRtl = docDir === 'rtl'
  const { t, i18n } = useTranslation()
  const [openDialog, setOpenDialog] = useState(false)
  const [editingOrder, setEditingOrder] = useState<SupplierOrder | null>(null)
  const [orders, setOrders] = useState<SupplierOrder[]>([])
  const [suppliers, setSuppliers] = useState<Supplier[]>([])
  const [ingredients, setIngredients] = useState<Ingredient[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [updatingOrderId, setUpdatingOrderId] = useState<string | null>(null)

  const [newOrder, setNewOrder] = useState<Partial<SupplierOrder>>({
    supplierId: '',
    items: [],
    totalAmount: 0,
    status: 'draft',
    priority: 'medium',
    orderDate: new Date(),
    autoGenerated: false,
    notes: ''
  })

  // Sorting state
  type OrderBy = 'orderNumber' | 'supplier' | 'totalAmount' | 'status' | 'priority' | 'orderDate' | 'expectedDeliveryDate'
  const [orderBy, setOrderBy] = useState<OrderBy>('orderDate')
  const [orderDirection, setOrderDirection] = useState<'asc' | 'desc'>('desc')

  // Collapse state for suppliers without open orders
  const [expandedSuppliersSection, setExpandedSuppliersSection] = useState(false)

  // Search state
  const [searchQuery, setSearchQuery] = useState('')

  // Import state
  const [openImportDialog, setOpenImportDialog] = useState(false)
  const [importData, setImportData] = useState<any[]>([])
  const [importMapping, setImportMapping] = useState<{
    supplier?: Supplier
    itemNameColumn?: string
    quantityColumn?: string
    unitPriceColumn?: string
  }>({})
  const fileInputRef = useRef<HTMLInputElement>(null)

  // Use interface with stable ID for order items
  interface OrderItemWithId extends SupplierOrderItem {
    tempId: string
  }

  const [orderItems, setOrderItems] = useState<OrderItemWithId[]>([])

  // Load data on component mount
  useEffect(() => {
    loadOrders()
    loadSuppliers()
    loadIngredients()
  }, [])

  // Set up real-time subscription
  useEffect(() => {
    const subscription = subscriptions.supplierOrders(payload => {
      console.log('Supplier orders changed:', payload)
      loadOrders()
    })

    return () => {
      subscription.unsubscribe()
    }
  }, [])

  const loadOrders = async () => {
    try {
      setLoading(true)
      setError(null)
      const data = await supplierOrdersService.getAll()
      setOrders(data)
    } catch (err) {
      setError(err instanceof Error ? err.message : t('failed_to_load_data'))
    } finally {
      setLoading(false)
    }
  }

  const loadSuppliers = async () => {
    try {
      const data = await suppliersService.getAll()
      setSuppliers(data.filter(s => s.isActive))
    } catch (err) {
      console.error('Failed to load suppliers:', err)
    }
  }

  const loadIngredients = async () => {
    try {
      const data = await ingredientsService.getAll()
      console.log('Loaded ingredients with packaging info:', data)
      setIngredients(data.filter(i => i.isAvailable))
    } catch (err) {
      console.error('Failed to load ingredients:', err)
    }
  }

  const handleOpenDialog = (order?: SupplierOrder) => {
    if (order) {
      setEditingOrder(order)
      setNewOrder(order)
      setOrderItems(
        order.items.map(item => ({
          ...item,
          tempId: `temp-${Date.now()}-${Math.random()}`
        }))
      )
    } else {
      setEditingOrder(null)
      setNewOrder({
        supplierId: '',
        items: [],
        totalAmount: 0,
        status: 'draft',
        priority: 'medium',
        orderDate: new Date(),
        autoGenerated: false,
        notes: ''
      })
      setOrderItems([])
    }
    setOpenDialog(true)
  }

  const handleCloseDialog = () => {
    setOpenDialog(false)
    setEditingOrder(null)
    setOrderItems([])
  }

  // Import functions
  const handleImportClick = () => {
    fileInputRef.current?.click()
  }

  const downloadTemplate = () => {
    const template = [
      {
        supplier: 'Meat Supplier Co.',
        itemName: 'Ground Beef',
        quantity: 10,
        unitPrice: 8.99,
        totalPrice: 89.90,
        status: 'draft',
        priority: 'medium',
        orderDate: format(new Date(), 'yyyy-MM-dd'),
        expectedDeliveryDate: format(new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), 'yyyy-MM-dd'),
        notes: 'Regular weekly order'
      },
      {
        supplier: 'Meat Supplier Co.',
        itemName: 'Chicken Breast',
        quantity: 15,
        unitPrice: 6.50,
        totalPrice: 97.50,
        status: 'draft',
        priority: 'medium',
        orderDate: format(new Date(), 'yyyy-MM-dd'),
        expectedDeliveryDate: format(new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), 'yyyy-MM-dd'),
        notes: ''
      },
      {
        supplier: 'Fresh Produce Inc.',
        itemName: 'Tomatoes',
        quantity: 20,
        unitPrice: 2.50,
        totalPrice: 50.00,
        status: 'draft',
        priority: 'high',
        orderDate: format(new Date(), 'yyyy-MM-dd'),
        expectedDeliveryDate: format(new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), 'yyyy-MM-dd'),
        notes: 'Fresh delivery required'
      }
    ]

    const csv = Papa.unparse(template)
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' })
    const link = document.createElement('a')
    link.href = URL.createObjectURL(blob)
    link.download = 'supplier-order-template.csv'
    link.click()
    message.success(t('template_downloaded_success'))
  }

  const handleFileImport = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: results => {
        setImportData(results.data)
        setOpenImportDialog(true)
      },
      error: error => {
        message.error(t('failed_to_parse_file') + ': ' + error.message)
      }
    })

    // Reset file input
    event.target.value = ''
  }

  const handleImportMapping = async () => {
    if (!importMapping.supplier || !importMapping.itemNameColumn || !importMapping.quantityColumn || !importMapping.unitPriceColumn) {
      message.warning(t('please_map_all_required_fields'))
      return
    }

    try {
      // Map imported data to order items
      const mappedItems: OrderItemWithId[] = []

      for (const row of importData) {
        const itemName = row[importMapping.itemNameColumn]?.toString().trim()
        const quantity = parseFloat(row[importMapping.quantityColumn] || 0)
        const unitPrice = parseFloat(row[importMapping.unitPriceColumn] || 0)

        if (!itemName || quantity <= 0) continue

        // Try to match with existing ingredients
        const matchedIngredient = ingredients.find(ing => ing.name.toLowerCase() === itemName.toLowerCase() && ing.supplier === importMapping.supplier?.name)

        if (matchedIngredient) {
          mappedItems.push({
            tempId: `temp-${Date.now()}-${Math.random()}`,
            ingredientId: matchedIngredient.id,
            quantity: quantity,
            unitPrice: unitPrice || matchedIngredient.costPerUnit,
            totalPrice: quantity * (unitPrice || matchedIngredient.costPerUnit)
          })
        }
      }

      if (mappedItems.length === 0) {
        message.warning(t('no_matching_ingredients_found'))
        return
      }

      // Create new order with imported items
      setNewOrder({
        supplierId: importMapping.supplier.id,
        items: [],
        totalAmount: 0,
        status: 'draft',
        priority: 'medium',
        orderDate: new Date(),
        autoGenerated: false,
        notes: t('imported_from_file')
      })
      setOrderItems(mappedItems)
      setOpenImportDialog(false)
      setOpenDialog(true)

      message.success(t('successfully_imported_items', { count: mappedItems.length }))
    } catch (error) {
      message.error(t('import_failed'))
    }
  }

  const handleAddOrderItem = useCallback(() => {
    setOrderItems(prev => [
      ...prev,
      {
        tempId: `temp-${Date.now()}-${Math.random()}`, // Add unique temporary ID
        ingredientId: '',
        quantity: 1,
        unitPrice: 0,
        totalPrice: 0,
        notes: ''
      }
    ])
  }, [])

  // Get ingredients filtered by selected supplier (memoized to prevent re-renders)
  const filteredIngredients = useMemo(() => {
    if (!newOrder.supplierId) return []
    const selectedSupplier = suppliers.find(s => s.id === newOrder.supplierId)
    if (!selectedSupplier) return []

    return ingredients.filter(ingredient => ingredient.supplier === selectedSupplier.name)
  }, [newOrder.supplierId, suppliers, ingredients])

  const handleUpdateOrderItem = useCallback((tempId: string, field: keyof SupplierOrderItem, value: any) => {
    setOrderItems(prev =>
      prev.map(item => {
        if (item.tempId !== tempId) return item

        const updatedItem = { ...item, [field]: value }

        // Recalculate total price for this item
        if (field === 'quantity' || field === 'unitPrice') {
          updatedItem.totalPrice = updatedItem.quantity * updatedItem.unitPrice
        }

        return updatedItem
      })
    )

    // Update total amount in next effect
  }, [])

  // Effect to update total amount when order items change
  useEffect(() => {
    const totalAmount = orderItems.reduce((sum, item) => {
      return sum + item.totalPrice
    }, 0)
    setNewOrder(prev => ({ ...prev, totalAmount }))
  }, [orderItems])

  const handleRemoveOrderItem = useCallback((tempId: string) => {
    setOrderItems(prev => prev.filter(item => item.tempId !== tempId))
  }, [])

  const handleSubmitOrder = async () => {
    try {
      // Remove tempId before submitting
      const cleanItems = orderItems.map(({ tempId, ...item }) => item)
      const orderData = { ...newOrder, items: cleanItems }

      if (editingOrder) {
        await supplierOrdersService.update(editingOrder.id, orderData)
        message.success('Supplier order updated successfully')
      } else {
        await supplierOrdersService.create(orderData as Omit<SupplierOrder, 'id' | 'orderNumber' | 'createdAt' | 'updatedAt'>)
        message.success('Supplier order created successfully')
      }
      handleCloseDialog()
      loadOrders()
    } catch (err) {
      message.error(err instanceof Error ? err.message : 'Failed to save supplier order')
    }
  }

  const handleUpdateStatus = async (orderId: string, status: SupplierOrder['status']) => {
    try {
      setUpdatingOrderId(orderId)
      await supplierOrdersService.updateStatus(orderId, status)
      message.success('Order status updated successfully')
      loadOrders()
    } catch (err) {
      message.error(err instanceof Error ? err.message : 'Failed to update order status')
    } finally {
      setUpdatingOrderId(null)
    }
  }

  const handleDeleteOrder = async (orderId: string) => {
    if (window.confirm('Are you sure you want to delete this order?')) {
      try {
        await supplierOrdersService.delete(orderId)
        message.success('Order deleted successfully')
        loadOrders()
      } catch (err) {
        message.error(err instanceof Error ? err.message : 'Failed to delete order')
      }
    }
  }

  const handleGenerateAutoOrders = async () => {
    try {
      setLoading(true)
      const autoOrders = await supplierOrdersService.generateAutoOrders()
      message.success(`Generated ${autoOrders.length} automatic orders based on low stock`)
      loadOrders()
    } catch (err) {
      message.error(err instanceof Error ? err.message : 'Failed to generate auto orders')
    } finally {
      setLoading(false)
    }
  }

  const ordersNeedingAttention = orders.filter(order => {
    const now = new Date()
    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000)

    // Only flag as needing attention if:
    // 1. Delivery is overdue by more than 1 day AND not delivered/cancelled
    // 2. OR submitted orders older than 7 days
    return (order.expectedDeliveryDate && order.expectedDeliveryDate < oneDayAgo && !['delivered', 'cancelled'].includes(order.status)) || (order.status === 'submitted' && order.submittedDate && (now.getTime() - order.submittedDate.getTime()) / (1000 * 60 * 60 * 24) > 7)
  })

  // Sorting logic
  const handleRequestSort = (property: OrderBy) => {
    const isAsc = orderBy === property && orderDirection === 'asc'
    setOrderDirection(isAsc ? 'desc' : 'asc')
    setOrderBy(property)
  }

  const sortedOrders = useMemo(() => {
    const comparator = (a: SupplierOrder, b: SupplierOrder) => {
      let aValue: any
      let bValue: any

      switch (orderBy) {
        case 'orderNumber':
          aValue = a.orderNumber
          bValue = b.orderNumber
          break
        case 'supplier':
          aValue = a.supplier?.name || ''
          bValue = b.supplier?.name || ''
          break
        case 'totalAmount':
          aValue = a.totalAmount
          bValue = b.totalAmount
          break
        case 'status':
          aValue = a.status
          bValue = b.status
          break
        case 'priority':
          const priorityOrder = { urgent: 4, high: 3, medium: 2, low: 1 }
          aValue = priorityOrder[a.priority]
          bValue = priorityOrder[b.priority]
          break
        case 'orderDate':
          aValue = a.orderDate.getTime()
          bValue = b.orderDate.getTime()
          break
        case 'expectedDeliveryDate':
          aValue = a.expectedDeliveryDate?.getTime() || 0
          bValue = b.expectedDeliveryDate?.getTime() || 0
          break
        default:
          return 0
      }

      if (bValue < aValue) {
        return orderDirection === 'desc' ? -1 : 1
      }
      if (bValue > aValue) {
        return orderDirection === 'desc' ? 1 : -1
      }
      return 0
    }

    return [...orders].sort(comparator)
  }, [orders, orderBy, orderDirection])

  // Filter orders based on search query
  const filteredOrders = useMemo(() => {
    if (!searchQuery.trim()) return sortedOrders

    const query = searchQuery.toLowerCase()
    return sortedOrders.filter(order => {
      return order.orderNumber.toLowerCase().includes(query) || order.supplier?.name.toLowerCase().includes(query) || order.status.toLowerCase().includes(query) || order.priority.toLowerCase().includes(query) || order.notes?.toLowerCase().includes(query) || order.items.some(item => item.ingredient?.name.toLowerCase().includes(query))
    })
  }, [sortedOrders, searchQuery])

  // Calculate suppliers without open orders
  const suppliersWithoutOpenOrders = useMemo(() => {
    const suppliersWithOpenOrders = new Set(orders.filter(order => ['draft', 'submitted'].includes(order.status)).map(order => order.supplierId))

    return suppliers.filter(supplier => !suppliersWithOpenOrders.has(supplier.id))
  }, [suppliers, orders])

  const importExportMenuItems = [
    {
      key: 'download',
      icon: <DownloadOutlined />,
      label: t('download_template'),
      onClick: downloadTemplate
    },
    {
      key: 'import',
      icon: <UploadOutlined />,
      label: t('import_from_file'),
      onClick: handleImportClick
    }
  ]

  // Table columns
  const columns: ColumnsType<SupplierOrder> = [
    {
      title: t('order_number'),
      dataIndex: 'orderNumber',
      key: 'orderNumber',
      sorter: true,
      render: (text, record) => (
        <Space direction="horizontal">
          {record.autoGenerated && <ThunderboltOutlined style={{ color: '#1890ff', fontSize: 16 }} />}
          <span>{text}</span>
        </Space>
      )
    },
    {
      title: t('supplier_label'),
      dataIndex: ['supplier', 'name'],
      key: 'supplier',
      sorter: true,
      render: (text) => text || t('unknown')
    },
    {
      title: t('items'),
      dataIndex: 'items',
      key: 'items',
      render: (items: SupplierOrderItem[]) => `${items.length} ${t('items')}`
    },
    {
      title: t('total_amount'),
      dataIndex: 'totalAmount',
      key: 'totalAmount',
      sorter: true,
      align: isRtl ? 'left' : 'right',
      render: (amount) => formatCurrency(amount)
    },
    {
      title: t('status'),
      dataIndex: 'status',
      key: 'status',
      sorter: true,
      render: (status, record) => (
        <Select
          size="small"
          value={status}
          onChange={(value) => handleUpdateStatus(record.id, value)}
          style={{ minWidth: 120 }}
          loading={updatingOrderId === record.id}
          disabled={updatingOrderId === record.id}
        >
          {ORDER_STATUSES.map(s => (
            <Option key={s} value={s}>
              <Tag color={getStatusColor(s)}>{t(s)}</Tag>
            </Option>
          ))}
        </Select>
      )
    },
    {
      title: t('priority'),
      dataIndex: 'priority',
      key: 'priority',
      sorter: true,
      render: (priority) => <Tag color={getPriorityColor(priority)}>{t(priority)}</Tag>
    },
    {
      title: t('order_date'),
      dataIndex: 'orderDate',
      key: 'orderDate',
      sorter: true,
      render: (date) => format(new Date(date), 'MMM dd, yyyy')
    },
    {
      title: t('expected_delivery'),
      dataIndex: 'expectedDeliveryDate',
      key: 'expectedDeliveryDate',
      sorter: true,
      render: (date) => date ? format(new Date(date), 'MMM dd, yyyy') : '-'
    },
    {
      title: t('actions'),
      key: 'actions',
      align: isRtl ? 'left' : 'right',
      render: (_, record) => (
        <Space>
          <Button
            type="text"
            icon={<EditOutlined />}
            onClick={() => handleOpenDialog(record)}
            title={t('edit_order')}
          />
          <Button
            type="text"
            danger
            icon={<DeleteOutlined />}
            onClick={() => handleDeleteOrder(record.id)}
            title={t('delete_order')}
          />
        </Space>
      )
    }
  ]

  if (loading && orders.length === 0) {
    return (
      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '400px' }}>
        <Spin size="large" />
      </div>
    )
  }

  return (
    <div style={{ direction: isRtl ? 'rtl' : 'ltr' }}>
      {/* Header */}
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 24, flexDirection: isRtl ? 'row-reverse' : 'row' }}>
        <Title level={4} style={{ margin: 0, textAlign: isRtl ? 'right' : 'left' }}>
          {t('supplier_orders')}
        </Title>
        <Space direction="horizontal">
          <Dropdown menu={{ items: importExportMenuItems }}>
            <Button icon={<MoreOutlined />}>
              {t('import_export')}
            </Button>
          </Dropdown>
          <Button icon={<ThunderboltOutlined />} onClick={handleGenerateAutoOrders} loading={loading}>
            {t('generate_auto_orders')}
          </Button>
          <Button type="primary" icon={<PlusOutlined />} onClick={() => handleOpenDialog()}>
            {t('new_order')}
          </Button>
        </Space>
      </div>

      {/* Summary Cards */}
      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
        <Col xs={24} sm={12} md={6}>
          <Card>
            <Space direction="horizontal">
              <ShoppingCartOutlined style={{ fontSize: 24, color: '#1890ff' }} />
              <div style={{ textAlign: isRtl ? 'right' : 'left' }}>
                <Title level={4} style={{ margin: 0, color: '#1890ff', fontWeight: 700 }}>
                  {orders.length}
                </Title>
                <Text type="secondary">{t('total_orders')}</Text>
              </div>
            </Space>
          </Card>
        </Col>

        <Col xs={24} sm={12} md={6}>
          <Card>
            <Space direction="horizontal">
              <ClockCircleOutlined style={{ fontSize: 24, color: '#faad14' }} />
              <div style={{ textAlign: isRtl ? 'right' : 'left' }}>
                <Title level={4} style={{ margin: 0, color: '#faad14', fontWeight: 700 }}>
                  {orders.filter(o => o.status === 'submitted' || o.status === 'confirmed').length}
                </Title>
                <Text type="secondary">{t('pending_orders')}</Text>
              </div>
            </Space>
          </Card>
        </Col>

        <Col xs={24} sm={12} md={6}>
          <Card>
            <Space direction="horizontal">
              <WarningOutlined style={{ fontSize: 24, color: '#ff4d4f' }} />
              <div style={{ textAlign: isRtl ? 'right' : 'left' }}>
                <Title level={4} style={{ margin: 0, color: '#ff4d4f', fontWeight: 700 }}>
                  {ordersNeedingAttention.length}
                </Title>
                <Text type="secondary">{t('need_attention')}</Text>
              </div>
            </Space>
          </Card>
        </Col>

        <Col xs={24} sm={12} md={6}>
          <Card>
            <Space direction="horizontal">
              <CheckOutlined style={{ fontSize: 24, color: '#52c41a' }} />
              <div style={{ textAlign: isRtl ? 'right' : 'left' }}>
                <Title level={4} style={{ margin: 0, color: '#52c41a', fontWeight: 700 }}>
                  {orders.filter(o => o.status === 'delivered').length}
                </Title>
                <Text type="secondary">{t('delivered_text')}</Text>
              </div>
            </Space>
          </Card>
        </Col>
      </Row>

      {/* Orders that need attention */}
      {ordersNeedingAttention.length > 0 && (
        <Card style={{ marginBottom: 24 }}>
          <Title level={5} style={{ color: '#ff4d4f' }}>
            {t('orders_needing_attention')}
          </Title>
          <Space direction="vertical" style={{ width: '100%' }}>
            {ordersNeedingAttention.map(order => (
              <div key={order.id} style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '8px 0' }}>
                <div>
                  <Text strong>{`${order.orderNumber} - ${order.supplier?.name}`}</Text>
                  <br />
                  <Text type="secondary">
                    {order.expectedDeliveryDate && order.expectedDeliveryDate < new Date(new Date().getTime() - 24 * 60 * 60 * 1000) ? t('overdue_delivery_expected', { date: format(order.expectedDeliveryDate, 'MMM dd, yyyy') }) : order.status === 'submitted' && order.submittedDate ? t('submitted_days_ago', { count: Math.floor((new Date().getTime() - order.submittedDate.getTime()) / (1000 * 60 * 60 * 24)) }) : t('needs_attention')}
                  </Text>
                </div>
                <Button type="text" icon={<EditOutlined />} onClick={() => handleOpenDialog(order)} />
              </div>
            ))}
          </Space>
        </Card>
      )}

      {/* Suppliers without open orders */}
      {suppliersWithoutOpenOrders.length > 0 && (
        <div style={{ marginBottom: 16 }}>
          {!expandedSuppliersSection ? (
            <Button
              size="small"
              icon={<ShoppingCartOutlined />}
              onClick={() => setExpandedSuppliersSection(true)}
              style={{ textTransform: 'none' }}
            >
              {t('suppliers_without_open_orders')} ({suppliersWithoutOpenOrders.length}) <DownOutlined />
            </Button>
          ) : (
            <Card>
              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', flexDirection: isRtl ? 'row-reverse' : 'row', marginBottom: 8 }}>
                <Space direction="horizontal">
                  <ShoppingCartOutlined />
                  <Title level={5} style={{ margin: 0 }}>{t('suppliers_without_open_orders')}</Title>
                </Space>
                <Button type="text" size="small" icon={<UpOutlined />} onClick={() => setExpandedSuppliersSection(false)} />
              </div>
              <Text type="secondary" style={{ marginBottom: 16, display: 'block' }}>
                {t('suppliers_without_open_orders_desc')}
              </Text>
              <Space wrap>
                {suppliersWithoutOpenOrders.map(supplier => (
                  <Tag
                    key={supplier.id}
                    style={{ cursor: 'pointer' }}
                    onClick={() => {
                      setNewOrder({
                        supplierId: supplier.id,
                        items: [],
                        totalAmount: 0,
                        status: 'draft',
                        priority: 'medium',
                        orderDate: new Date(),
                        autoGenerated: false,
                        notes: ''
                      })
                      setOrderItems([])
                      handleOpenDialog()
                    }}
                  >
                    {supplier.name}
                  </Tag>
                ))}
              </Space>
            </Card>
          )}
        </div>
      )}

      {/* Error handling */}
      {error && (
        <Alert message={error} type="error" style={{ marginBottom: 24 }} closable />
      )}

      {/* Orders Table */}
      <Card>
        {/* Search Bar */}
        <div style={{ marginBottom: 16 }}>
          <Input
            placeholder={t('search_orders')}
            prefix={<SearchOutlined />}
            value={searchQuery}
            onChange={e => setSearchQuery(e.target.value)}
            allowClear
          />
        </div>

        <Table
          columns={columns}
          dataSource={filteredOrders}
          rowKey="id"
          loading={loading}
          pagination={{ pageSize: 10 }}
          locale={{
            emptyText: searchQuery ? t('no_orders_match_search') : t('no_orders_found')
          }}
          onChange={(pagination, filters, sorter: any) => {
            if (sorter.column) {
              handleRequestSort(sorter.columnKey as OrderBy)
            }
          }}
        />
      </Card>

      {/* Create/Edit Order Dialog */}
      <Modal
        title={editingOrder ? t('edit_supplier_order') : t('create_new_supplier_order')}
        open={openDialog}
        onCancel={handleCloseDialog}
        width={800}
        footer={[
          <Button key="cancel" onClick={handleCloseDialog}>
            {t('cancel')}
          </Button>,
          <Button
            key="submit"
            type="primary"
            onClick={handleSubmitOrder}
            disabled={!newOrder.supplierId || orderItems.length === 0}
          >
            {editingOrder ? t('update_order') : t('create_order')}
          </Button>
        ]}
      >
        <Row gutter={16} style={{ marginTop: 16 }}>
          <Col xs={24} sm={12}>
            <div style={{ marginBottom: 16 }}>
              <Text>{t('supplier_label')} *</Text>
              <Select
                style={{ width: '100%', marginTop: 4 }}
                placeholder={t('supplier_label')}
                value={newOrder.supplierId || undefined}
                onChange={(value) => {
                  setNewOrder({ ...newOrder, supplierId: value, totalAmount: 0 })
                  setOrderItems([])
                }}
                showSearch
                optionFilterProp="children"
              >
                {suppliers.map(supplier => (
                  <Option key={supplier.id} value={supplier.id}>
                    {supplier.name}
                  </Option>
                ))}
              </Select>
            </div>
          </Col>
          <Col xs={24} sm={12}>
            <div style={{ marginBottom: 16 }}>
              <Text>{t('priority')}</Text>
              <Select
                style={{ width: '100%', marginTop: 4 }}
                value={newOrder.priority || 'medium'}
                onChange={(value) => setNewOrder({ ...newOrder, priority: value as SupplierOrder['priority'] })}
              >
                {ORDER_PRIORITIES.map(priority => (
                  <Option key={priority} value={priority}>
                    {t(priority)}
                  </Option>
                ))}
              </Select>
            </div>
          </Col>
          <Col xs={24} sm={12}>
            <div style={{ marginBottom: 16 }}>
              <Text>{t('status')}</Text>
              <Select
                style={{ width: '100%', marginTop: 4 }}
                value={newOrder.status || 'draft'}
                onChange={(value) => setNewOrder({ ...newOrder, status: value as SupplierOrder['status'] })}
              >
                {ORDER_STATUSES.map(status => (
                  <Option key={status} value={status}>
                    <Tag color={getStatusColor(status)}>{t(status)}</Tag>
                  </Option>
                ))}
              </Select>
            </div>
          </Col>
          <Col xs={24} sm={12}>
            <div style={{ marginBottom: 16 }}>
              <Text>{t('order_date')}</Text>
              <DatePicker
                style={{ width: '100%', marginTop: 4 }}
                value={newOrder.orderDate ? dayjs(newOrder.orderDate) : dayjs()}
                onChange={(date) => setNewOrder({ ...newOrder, orderDate: date ? date.toDate() : new Date() })}
              />
            </div>
          </Col>
          <Col xs={24} sm={12}>
            <div style={{ marginBottom: 16 }}>
              <Text>{t('expected_delivery')}</Text>
              <DatePicker
                style={{ width: '100%', marginTop: 4 }}
                value={newOrder.expectedDeliveryDate ? dayjs(newOrder.expectedDeliveryDate) : null}
                onChange={(date) => setNewOrder({ ...newOrder, expectedDeliveryDate: date ? date.toDate() : undefined })}
              />
            </div>
          </Col>
          <Col xs={24}>
            <div style={{ marginBottom: 16 }}>
              <Text>{t('notes')}</Text>
              <Input.TextArea
                style={{ marginTop: 4 }}
                value={newOrder.notes || ''}
                onChange={(e) => setNewOrder({ ...newOrder, notes: e.target.value })}
                rows={2}
              />
            </div>
          </Col>
        </Row>

        <Divider />

        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16, flexDirection: isRtl ? 'row-reverse' : 'row' }}>
          <Title level={5} style={{ margin: 0, textAlign: isRtl ? 'right' : 'left' }}>
            {t('order_items')}
          </Title>
          <Button icon={<PlusOutlined />} onClick={handleAddOrderItem} disabled={!newOrder.supplierId}>
            {t('add_item')}
          </Button>
        </div>

        {!newOrder.supplierId && (
          <Alert message={t('select_supplier_first')} type="info" style={{ marginBottom: 16 }} />
        )}

        {newOrder.supplierId && filteredIngredients.length === 0 && (
          <Alert message={t('no_ingredients_for_supplier')} type="warning" style={{ marginBottom: 16 }} />
        )}

        {orderItems.map(item => {
          const selectedIngredient = filteredIngredients.find(i => i.id === item.ingredientId)
          console.log('Selected ingredient:', selectedIngredient)
          const hasPackaging = selectedIngredient?.orderByPackage && selectedIngredient?.unitsPerPackage && selectedIngredient.unitsPerPackage > 1
          const packageInfo = hasPackaging ? `${selectedIngredient.unitsPerPackage} ${selectedIngredient.unit} per ${selectedIngredient.packageType || 'package'}` : ''
          const totalUnits = hasPackaging ? item.quantity * (selectedIngredient?.unitsPerPackage || 1) : item.quantity

          return (
            <div key={item.tempId} style={{ marginBottom: 24 }}>
              <Row gutter={16} align="top">
                <Col xs={24} sm={10}>
                  <div style={{ marginBottom: 8 }}>
                    <Text>{t('ingredient')}</Text>
                    <Select
                      style={{ width: '100%', marginTop: 4 }}
                      placeholder={t('ingredient')}
                      value={item.ingredientId || undefined}
                      onChange={(value) => {
                        handleUpdateOrderItem(item.tempId, 'ingredientId', value)
                        const ingredient = filteredIngredients.find(i => i.id === value)
                        if (ingredient) {
                          // If ordering by package, unit price should be cost per unit * units per package
                          const unitPrice = ingredient.orderByPackage && ingredient.unitsPerPackage && ingredient.unitsPerPackage > 1
                            ? ingredient.costPerUnit * ingredient.unitsPerPackage
                            : ingredient.costPerUnit
                          handleUpdateOrderItem(item.tempId, 'unitPrice', unitPrice)
                        }
                      }}
                      disabled={!newOrder.supplierId}
                      showSearch
                      optionFilterProp="children"
                    >
                      {filteredIngredients.map(ingredient => (
                        <Option key={ingredient.id} value={ingredient.id}>
                          {ingredient.orderByPackage && ingredient.unitsPerPackage && ingredient.unitsPerPackage > 1
                            ? `${ingredient.name} (${ingredient.unitsPerPackage} ${ingredient.unit}/${ingredient.packageType || 'package'})`
                            : ingredient.name}
                        </Option>
                      ))}
                    </Select>
                  </div>
                </Col>
                <Col xs={12} sm={4}>
                  <div style={{ marginBottom: 8 }}>
                    <Text>{hasPackaging ? `${t('quantity')} (${selectedIngredient?.packageType || 'packages'})` : t('quantity')}</Text>
                    <Input
                      type="number"
                      style={{ marginTop: 4 }}
                      value={item.quantity}
                      onChange={(e) => handleUpdateOrderItem(item.tempId, 'quantity', Number(e.target.value))}
                    />
                    {hasPackaging && (
                      <Text type="secondary" style={{ fontSize: 12, display: 'block', marginTop: 4 }}>
                        {totalUnits} {selectedIngredient?.unit} total
                      </Text>
                    )}
                  </div>
                </Col>
                <Col xs={12} sm={4}>
                  <div style={{ marginBottom: 8 }}>
                    <Text>{hasPackaging ? `${t('unit_cost')}/${selectedIngredient?.packageType || 'package'}` : t('unit_cost')}</Text>
                    <Input
                      type="number"
                      style={{ marginTop: 4 }}
                      value={item.unitPrice}
                      onChange={(e) => handleUpdateOrderItem(item.tempId, 'unitPrice', Number(e.target.value))}
                    />
                  </div>
                </Col>
                <Col xs={12} sm={4}>
                  <div style={{ marginBottom: 8 }}>
                    <Text>{t('total')}</Text>
                    <Input
                      style={{ marginTop: 4 }}
                      value={formatCurrency(item.totalPrice)}
                      disabled
                    />
                  </div>
                </Col>
                <Col xs={12} sm={2} style={{ display: 'flex', alignItems: 'flex-end', justifyContent: 'center' }}>
                  <Button
                    danger
                    type="text"
                    icon={<DeleteOutlined />}
                    onClick={() => handleRemoveOrderItem(item.tempId)}
                  />
                </Col>
              </Row>
              {packageInfo && (
                <Text type="secondary" style={{ fontSize: 12, display: 'block', marginTop: 4 }}>
                  {packageInfo}
                </Text>
              )}
            </div>
          )
        })}

        <div style={{ marginTop: 16, textAlign: isRtl ? 'left' : 'right' }}>
          <Title level={5}>
            {t('total_amount')}: {formatCurrency(newOrder.totalAmount || 0)}
          </Title>
        </div>
      </Modal>

      {/* Import Dialog */}
      <Modal
        title={t('import_supplier_order')}
        open={openImportDialog}
        onCancel={() => {
          setOpenImportDialog(false)
          setImportData([])
          setImportMapping({})
        }}
        width={800}
        footer={[
          <Button
            key="cancel"
            onClick={() => {
              setOpenImportDialog(false)
              setImportData([])
              setImportMapping({})
            }}
          >
            {t('cancel')}
          </Button>,
          <Button
            key="import"
            type="primary"
            onClick={handleImportMapping}
            disabled={!importMapping.supplier || !importMapping.itemNameColumn || !importMapping.quantityColumn || !importMapping.unitPriceColumn}
          >
            {t('import')}
          </Button>
        ]}
      >
        <Alert message={t('import_instructions')} type="info" style={{ marginBottom: 16 }} />

        {importData.length > 0 && (
          <>
            <Title level={5} style={{ marginBottom: 16 }}>
              {t('map_columns')}
            </Title>

            <Row gutter={16}>
              <Col xs={24}>
                <div style={{ marginBottom: 16 }}>
                  <Text>{t('select_supplier')} *</Text>
                  <Select
                    style={{ width: '100%', marginTop: 4 }}
                    placeholder={t('select_supplier')}
                    value={importMapping.supplier?.id}
                    onChange={(value) => {
                      const supplier = suppliers.find(s => s.id === value)
                      setImportMapping({ ...importMapping, supplier: supplier || undefined })
                    }}
                    showSearch
                    optionFilterProp="children"
                  >
                    {suppliers.map(supplier => (
                      <Option key={supplier.id} value={supplier.id}>
                        {supplier.name}
                      </Option>
                    ))}
                  </Select>
                </div>
              </Col>

              {importData.length > 0 && (
                <>
                  <Col xs={24} sm={8}>
                    <div style={{ marginBottom: 16 }}>
                      <Text>{t('item_name_column')}</Text>
                      <Select
                        style={{ width: '100%', marginTop: 4 }}
                        value={importMapping.itemNameColumn}
                        onChange={(value) => setImportMapping({ ...importMapping, itemNameColumn: value })}
                      >
                        {Object.keys(importData[0]).map(column => (
                          <Option key={column} value={column}>
                            {column}
                          </Option>
                        ))}
                      </Select>
                    </div>
                  </Col>

                  <Col xs={24} sm={8}>
                    <div style={{ marginBottom: 16 }}>
                      <Text>{t('quantity_column')}</Text>
                      <Select
                        style={{ width: '100%', marginTop: 4 }}
                        value={importMapping.quantityColumn}
                        onChange={(value) => setImportMapping({ ...importMapping, quantityColumn: value })}
                      >
                        {Object.keys(importData[0]).map(column => (
                          <Option key={column} value={column}>
                            {column}
                          </Option>
                        ))}
                      </Select>
                    </div>
                  </Col>

                  <Col xs={24} sm={8}>
                    <div style={{ marginBottom: 16 }}>
                      <Text>{t('unit_price_column')}</Text>
                      <Select
                        style={{ width: '100%', marginTop: 4 }}
                        value={importMapping.unitPriceColumn}
                        onChange={(value) => setImportMapping({ ...importMapping, unitPriceColumn: value })}
                      >
                        {Object.keys(importData[0]).map(column => (
                          <Option key={column} value={column}>
                            {column}
                          </Option>
                        ))}
                      </Select>
                    </div>
                  </Col>
                </>
              )}
            </Row>

            {/* Preview */}
            <Title level={5} style={{ marginTop: 24, marginBottom: 8 }}>
              {t('preview')}
            </Title>
            <Table
              size="small"
              dataSource={importData.slice(0, 5)}
              pagination={false}
              scroll={{ x: true }}
              columns={[
                {
                  title: t('item_name'),
                  dataIndex: importMapping.itemNameColumn,
                  key: 'itemName',
                  render: (text) => text || '-'
                },
                {
                  title: t('quantity'),
                  dataIndex: importMapping.quantityColumn,
                  key: 'quantity',
                  render: (text) => text || '-'
                },
                {
                  title: t('unit_price'),
                  dataIndex: importMapping.unitPriceColumn,
                  key: 'unitPrice',
                  render: (text) => text || '-'
                }
              ]}
            />
            {importData.length > 5 && (
              <Text type="secondary" style={{ fontSize: 12, display: 'block', marginTop: 8 }}>
                {t('showing_first_5_rows')}
              </Text>
            )}
          </>
        )}
      </Modal>

      {/* File Input */}
      <input type="file" ref={fileInputRef} accept=".csv,.xls,.xlsx" style={{ display: 'none' }} onChange={handleFileImport} />
    </div>
  )
}
